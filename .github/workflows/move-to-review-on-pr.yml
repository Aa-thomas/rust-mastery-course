name: Move linked issues to Review on PR
on: { pull_request: { types: [opened, reopened, synchronize, ready_for_review] } }
permissions: { contents: read, issues: write, projects: write, pull-requests: read }
jobs:
  move_to_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo; const pr = context.payload.pull_request; const text = (pr.title||'') + '\n' + (pr.body||'');
            const ids = new Set(); const re = /#(\d+)/g; let mm; while ((mm = re.exec(text)) !== null) ids.add(parseInt(mm[1],10));
            if (ids.size===0) return;
            const projects = await github.rest.projects.listForRepo({owner, repo}); const project = projects.data.find(p=>p.name==='Course Kanban'); if (!project) { core.setFailed('Run Setup Kanban first.'); return; }
            const cols = await github.rest.projects.listColumns({project_id: project.id}); const review = cols.data.find(c=>c.name==='Review') || cols.data[0];
            for (const issue_number of ids) {
              let moved=false;
              for (const col of cols.data) {
                const cards = await github.rest.projects.listCards({column_id: col.id, per_page: 100});
                const card = cards.data.find(cd=>cd.content_url && cd.content_url.endsWith(`/issues/${issue_number}`));
                if (card) { await github.rest.projects.moveCard({card_id: card.id, position:'top', column_id: review.id}); moved=true; break; }
              }
              if (!moved) {
                const issue = (await github.rest.issues.get({owner, repo, issue_number})).data;
                await github.rest.projects.createCard({column_id: review.id, content_id: issue.id, content_type:'Issue'});
              }
            }
